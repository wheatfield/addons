<?xml version="1.0" encoding="utf-8"?>
<includes>
	<include name="global_Background">
		<control type="group">
			<include>transition_Background</include>
			<control type="image">
				<include>screen_Dimensions</include>
				<include>toggle_Menu</include>
				<texture background="true">$VAR[window:Background]</texture>
				<visible>!Skin.HasSetting(fanart.global) + IsEmpty(ListItem.Property(Fanart_Image)) + ![Player.HasVideo + Skin.HasSetting(backgroundvideo.global)] + !Substring(Container.FolderPath,plugin://plugin.video.hdtrailers_net</visible>
				<fadetime>fadetime_Fanart</fadetime>
			</control>
		
			<control type="image">
				<include>screen_Dimensions</include>
				<include>toggle_Menu</include>
				<texture background="true">$INFO[ListItem.Property(Fanart_Image)]</texture>
				<visible>!Skin.HasSetting(fanart.global) + !IsEmpty(ListItem.Property(Fanart_Image)) + ![Player.HasVideo + Skin.HasSetting(backgroundvideo.global)] + !Control.IsVisible(531) + !Substring(Container.FolderPath,plugin://plugin.video.youtube)</visible>
				<include>fadeinout</include>
				<fadetime>fadetime_Fanart</fadetime>
			</control>
			<!--use the fanart image of the first real item in the list as a fallback for the "parent folder" entry. seasons and episodes level only.-->
			<control type="image">
				<include>screen_Dimensions</include>
				<include>toggle_Menu</include>
				<texture background="true">$INFO[Container().ListItem(1).Property(Fanart_Image)]</texture>
				<visible>StringCompare(Listitem.Icon,DefaultFolderBack.png) + [Container.Content(seasons) | Container.Content(episodes)] + !Skin.HasSetting(fanart.global) + ![Player.HasVideo + Skin.HasSetting(backgroundvideo.global)] + !Control.IsVisible(531)</visible>
				<fadetime>fadetime_Fanart</fadetime>
			</control>
			<!--playing video background-->
			<control type="group">
				<visible>Skin.HasSetting(backgroundvideo.global) + Player.HasVideo + !Window.IsActive(weather)</visible>
				<control type="image">
					<aspectratio>stretch</aspectratio>
					<include>screen_Dimensions</include>
					<texture>black.png</texture>
				</control>
				<control type="videowindow">
					<include>screen_Dimensions</include>
					<visible>![Window.IsActive(pictures) + Control.IsVisible(531)]</visible>
				</control>
			</control>
		</control>
		<!--base color-->
		<control type="image">
			<aspectratio>scale</aspectratio>
			<include>screen_Dimensions</include>
			<texture background="true">overlays/base_color.png</texture>
			<colordiffuse>base_1</colordiffuse>
			<visible>[![Window.IsActive(Pictures) + Control.IsVisible(531)] + !Window.IsActive(Visualisation)] + !Skin.HasSetting(diffuseoverlay.enable)</visible>
		</control>
		<!--black diffuse-->
		<control type="image">
			<aspectratio>scale</aspectratio>
			<include>screen_Dimensions</include>
			<texture colordiffuse="$VAR[DialogColorVar]">diffuseoverlay.png</texture>
			<animation effect="fade" time="200">WindowOpen</animation>
            <animation effect="fade" time="200">WindowClose</animation>
            <animation effect="fade" end="100" time="440" delay="160">Visible</animation>
            <animation effect="fade" start="100" end="0" time="320">Hidden</animation>
            <animation effect="fade" start="100" end="85" time="0" condition="true">Conditional</animation>
			<visible>[![Window.IsActive(Pictures) + Control.IsVisible(531)] + !Window.IsActive(Visualisation)] + Skin.HasSetting(diffuseoverlay.enable)</visible>
		</control>
	</include>
</includes>
